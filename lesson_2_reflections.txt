Q: What happens when you initialize a repository? Why do you need to do it?

The only thing that really happens is that it creates a hidden file named .git. 
You now have all you need to start creating commits and branches and things. You can't
do these things without first running git init. 

Q: How is the staging area different from the working directory and the repository? 
What value do you think it offers?

The staging area only contains files you intent to commit on your next commit, whereas 
your working directory contains all files at all times. It offers you the ability to
make logical changes per commit, rather than having to force all files to be committed
at once. 

Q: How can you use the staging area to make sure you have one commit per logical change?

Once you've added the files you think you want to commit, you can use "git diff --staged"
to see if you are adding the changes you want to be adding. 

Q: What are some situations when branches would be helpful in keeping your history 
organized? How would branches help?

If my master branch is my production-quality branch, then I can make new features and 
stuff without altering my master branch until I know it works. A development branch is 
where actual work would take place on the project. You can even have separate branches
for separate features so that if you get board of that feature, you can switch to a 
different one. 

Q: How do the diagrams help you visualize the branch structure?

Drawing that diagram before looking at the answer was probably the best thing I could do
to help me understand the concept. If I were only trying to keep track of the text-based 
logs without drawing/visualizing the shape of the branches, I would be completely lost.

Q: What is the result of merging two branches together? Why do we represent it in the
diagram the way we do? 

When you merge two branches together, you get a new commit with a combination of the two
branches. In the diagram, that merge is represented as a child of both branches because
it is linked to the commit history of both branches. 

Q: What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Pros: Git will automatically do merges that could take forever to do manually. Git brings 
up conflicts and shows you exactly where they are in as concise a way as possible so that
you can work it out with your colleague. Cons: It might make mistakes where you might
not have. It might struggle with something you see as obvious. 









